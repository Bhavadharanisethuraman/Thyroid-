# -*- coding: utf-8 -*-
"""DL-Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQCg20vUq1la-3Y9DsRzhzQHj22EDXGY
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/differentiated+thyroid+cancer+recurrence.zip')


plt.figure(figsize=(2, 4))
sns.countplot(data=df, x='Recurred')
plt.title('Distribution of Recurrence')
plt.xlabel('Recurrence')
plt.ylabel('Count')
plt.show()

numerical_features = ['Age']
plt.figure(figsize=(10, 8))
sns.pairplot(df[numerical_features + ['Recurred']], hue='Recurred')
plt.title('Pairplot of Numerical Features')
plt.show()

label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le


X = df.drop('Recurred', axis=1)
y = df['Recurred']


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from google.colab import drive
drive.mount('/content/drive')

df.head(10)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.summary()

history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2, verbose=1)

y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype(int)


cm = confusion_matrix(y_test, y_pred_classes)
print("Confusion Matrix:\n", cm)


cr = classification_report(y_test, y_pred_classes)
print("Classification Report:\n", cr)

model.save('deep_neural_network_model.keras')

